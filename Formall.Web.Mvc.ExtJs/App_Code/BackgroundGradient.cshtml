@functions {
    string Darken(string a, string b)
    {
        return a;
    }

    string Lighten(string a, string b)
    {
        return a;
    }

    string LinearGradient(string direction, string b)
    {
        return direction;
    }

    string AdjustColor(string bg_color, string hue, string saturation, string lightness)
    {
        return bg_color;
    }

    string ColorStops(string a, string b, string c = null, string d = null, string e = null, string g = null)
    {
        return a;
    }

    string LinearGradientBevel(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            Lighten(bg_color, "15%"),
            Lighten(bg_color, "8%") + " 30%",
            bg_color + " 65%",
            Darken(bg_color, "6%")
        ));
    }

    string LinearGradientGlossy(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            Lighten(bg_color, "15%"),
            Lighten(bg_color, "5%") + " 50%",
            bg_color + " 51%",
            Darken(bg_color, "5%")
        ));
    }

    string LinearGradientRecessed(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            Darken(bg_color, "10%"),
            Darken(bg_color, "5%") + "10%",
            bg_color + " 65%",
            Lighten(bg_color, ".5%")
        ));
    }

    string LinearGradientMatte(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            Lighten(bg_color, "3%"),
            Darken(bg_color, "4%")
        ));
    }

    string LinearGradientMatteReverse(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            Darken(bg_color, "6%"),
            Lighten(bg_color, "4%")
        ));
    }

    string LinearGradientPanelHeader(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            AdjustColor(bg_color, hue: "-0.857deg", saturation: "-1.63%", lightness: "3.529%"),
            AdjustColor(bg_color, hue: "0.158deg", saturation: "-1.21%", lightness: "0.392%") + " 45%",
            AdjustColor(bg_color, hue: "1.154deg", saturation: "0.607%", lightness: "-7.647%") + " 46%",
            AdjustColor(bg_color, hue: "1.154deg", saturation: "0.607%", lightness: "-7.647%") + " 50%",
            AdjustColor(bg_color, hue: "1.444deg", saturation: "-1.136%", lightness: "-4.706%") + " 51%",
            bg_color
        ));
    }

    string LinearGradientTabbar(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            AdjustColor(bg_color, hue: "0.0deg", saturation: "1.604%", lightness: "4.706%"),
            bg_color
        ));
    }

    string LinearGradientTab(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            AdjustColor(bg_color, hue: "1.382deg", saturation: "-18.571%", lightness: "-4.902%"),
            AdjustColor(bg_color, hue: "0.43deg", saturation: "-10.311%", lightness: "-2.157%") + " 25%",
            bg_color + " 45%"
        ));
    }

    string LinearGradientTabActive(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            AdjustColor(bg_color, hue: "-212.903deg", saturation: "-88.571%", lightness: "6.863%"),
            AdjustColor(bg_color, hue: "0.43deg", saturation: "-6.753%", lightness: "4.706%") + " 25%",
            bg_color + " 45%"
        ));
    }

    string LinearGradientTabOver(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            AdjustColor(bg_color, hue: "4.462deg", saturation: "-9.524%", lightness: "-3.725%"),
            AdjustColor(bg_color, hue: "2.272deg", saturation: "0.0%", lightness: "-1.569%") + " 25%",
            bg_color + " 45%"
        ));
    }

    string LinearGradientTabDisabled(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            bg_color,
            AdjustColor(bg_color, hue: "-0.267deg", saturation: "18.571%", lightness: "2.941%")
        ));
    }

    string LinearGradientGridHeader(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            AdjustColor(bg_color, hue: "0deg", saturation: "0%", lightness: "20.392%"),
            AdjustColor(bg_color, hue: "220.0deg", saturation: "5.66%", lightness: "12.353%")
        ));
    }

    string LinearGradientGridHeaderOver(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            AdjustColor(bg_color, hue: "0.175deg", saturation: "0.967%", lightness: "14.118%"),
            AdjustColor(bg_color, hue: "0.175deg", saturation: "0.967%", lightness: "14.118%") + " 39%",
            AdjustColor(bg_color, hue: "0.372deg", saturation: "0.101%", lightness: "10.196%") + " 40%",
            AdjustColor(bg_color, hue: "0.372deg", saturation: "0.101%", lightness: "10.196%")
        ));
    }

    string LinearGradientGridRowOver(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            AdjustColor(bg_color, hue: "0.175deg", saturation: "0.967%", lightness: "14.118%"),
            bg_color
        ));
    }

    string LinearGradientGridCellSpecial(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            bg_color,
            Darken(bg_color, "5")
        ));
    }

    string LinearGradientGlossyButton(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            bg_color,
            AdjustColor(bg_color, hue: "0deg", saturation: "0%", lightness: "-2.353%") + " 48%",
            AdjustColor(bg_color, hue: "0deg", saturation: "0%", lightness: "-11.373%") + " 52%",
            AdjustColor(bg_color, hue: "0deg", saturation: "0%", lightness: "-9.412%")
        ));
    }

    string LinearGradientGlossyButtonOver(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            bg_color,
            AdjustColor(bg_color, hue: "1.754deg", saturation: "0.0%", lightness: "-2.157%") + " 48%",
            AdjustColor(bg_color, hue: "5.833deg", saturation: "-35.135%", lightness: "-9.216%") + " 52%",
            AdjustColor(bg_color, hue: "5.833deg", saturation: "-27.273%", lightness: "-7.647%")
        ));
    }

    string LinearGradientGlossyButtonPressed(string direction, string bg_color)
    {
        return LinearGradient(direction, ColorStops(
            bg_color,
            AdjustColor(bg_color, hue: "-1.839deg", saturation: "-2.18%", lightness: "2.157%") + " 48%",
            AdjustColor(bg_color, hue: "-2.032deg", saturation: "37.871%", lightness: "-4.706%") + " 52%",
            AdjustColor(bg_color, hue: "-1.641deg", saturation: "36.301%", lightness: "-2.549%")
        ));
    }
}

/**
 * Creates a background gradient.
 *
 * Example usage:
 *     .foo {
 *          include background-gradient(#808080, matte, left);
 *     }
 *
 * param {Color} bg_color The background color of the gradient
 * param {String/List} [type=base_gradient] The type of gradient to be used. Can either
 * be a String which is a predefined gradient name, or it can can be a list of color stops.
 * If null is passed, this mixin will still set the `background-color` to bg_color.
 * The available predefined gradient names are:
 *
 * * bevel
 * * glossy
 * * recessed
 * * matte
 * * matte-reverse
 * * panel-header
 * * tabbar
 * * tab
 * * tab-active
 * * tab-over
 * * tab-disabled
 * * grid-header
 * * grid-header-over
 * * grid-row-over
 * * grid-cell-special
 * * glossy-button
 * * glossy-button-over
 * * glossy-button-pressed
 *
 * Each of these gradient names corresponds to a function named linear-gradient[name].
 * Themes can override these functions to customize the color stops that they return.
 * For example, to override the glossy-button gradient function add a function named
 * "linear-gradient-glossy-button" to a file named "sass/etc/mixins/background-gradient.scss"
 * in your theme.  The function should return the result of calling the Compass linear-gradient
 * function with the desired direction and color-stop information for the gradient.  For example:
 *
 *     string LinearGradient-glossy-button(string direction, string bg_color) {
 *         return LinearGradient(direction, ColorStops(
 *             mix(#fff, bg_color, 10%"),
 *             bg_color 50%",
 *             mix(#000, bg_color, 5%") 51%",
 *             bg_color
 *         ));
 *     }
 *
 * param {String} [$direction=top] The direction of the gradient. Can either be
 * `top` or `left`.
 *
 * member Global_CSS
 */
@helper BackgroundGradient(string bg_color, string type, string direction = "top")
{

    @:background-image: none;
    @:background-color: @bg_color;

    var base_gradient = "matte";

    type = type ?? base_gradient;

    if (base_gradient != null && bg_color != "transparent")
    {
        string gradient = null;

        //color_stops
        if (type == "list")
        {
            gradient = LinearGradient(direction, type);
        }

        //default gradients
        else if (type == "bevel")
        {
            gradient = LinearGradientBevel(direction, bg_color);
        }
        else if (type == "glossy")
        {
            gradient = LinearGradientGlossy(direction, bg_color);
        }
        else if (type == "recessed")
        {
            gradient = LinearGradientRecessed(direction, bg_color);
        }
        else if (type == "matte")
        {
            gradient = LinearGradientMatte(direction, bg_color);
        }
        else if (type == "matte-reverse")
        {
            gradient = LinearGradientMatteReverse(direction, bg_color);
        }

        // gradients
        else if (type == "panel-header")
        {
            gradient = LinearGradientPanelHeader(direction, bg_color);
        }
        else if (type == "tabbar")
        {
            gradient = LinearGradientTabbar(direction, bg_color);
        }
        else if (type == "tab")
        {
            gradient = LinearGradientTab(direction, bg_color);
        }
        else if (type == "tab-active")
        {
            gradient = LinearGradientTabActive(direction, bg_color);
        }
        else if (type == "tab-over")
        {
            gradient = LinearGradientTabOver(direction, bg_color);
        }
        else if (type == "tab-disabled")
        {
            gradient = LinearGradientTabDisabled(direction, bg_color);
        }
        else if (type == "grid-header")
        {
            gradient = LinearGradientGridHeader(direction, bg_color);
        }
        else if (type == "grid-header-over")
        {
            gradient = LinearGradientGridHeaderOver(direction, bg_color);
        }
        else if (type == "grid-row-over")
        {
            gradient = LinearGradientGridRowOver(direction, bg_color);
        }
        else if (type == "grid-cell-special")
        {
            gradient = LinearGradientGridCellSpecial(direction, bg_color);
        }
        else if (type == "glossy-button" || type == "glossy-button-disabled")
        {
            gradient = LinearGradientGlossyButton(direction, bg_color);
        }
        else if (type == "glossy-button-over")
        {
            gradient = LinearGradientGlossyButtonOver(direction, bg_color);
        }
        else if (type == "glossy-button-pressed")
        {
            gradient = LinearGradientGlossyButtonPressed(direction, bg_color);
        }

        if (gradient != null)
        {
            BackgroundImage(gradient);
        }
    }
}